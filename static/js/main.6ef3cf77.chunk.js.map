{"version":3,"sources":["components/navbar/Navbar.jsx","pages/zap/Zap.jsx","pages/admin/Admin.jsx","App.js","index.js"],"names":["Navbar","props","className","to","Zap","useState","require","rewardso","setrewardso","stakedreward","setstakedreward","CONTRAC","approve","fetchData","a","curWeb","window","tronWeb","curAddr","defaultAddress","base58","address","tnra","tronweb","contract","ABI","entrys","methods","earned","call","rdcount","console","log","deposits","dcount","sm","BigNumber","_rewardso","toNumber","Math","pow","stakedbalance","_stakedreward","amount","document","querySelector","value","decimals","parseInt","valu","tra","abi","send","tx","contractn","stake","resp","res","getReward","w","exit","setTimeout","height","width","src","type","id","placeholder","onClick","Admin","App","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ef3cf77.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navbar.css'\n\nexport const Navbar = (props) => {\n    return (\n        <nav>\n            <b className=\"logo\">\n                FarmBin\n            </b>\n\n            <div className=\"nav-links\">\n                <Link to=\"/\"> Farm </Link>\n                <Link to=\"/admin\"> Admin </Link>\n            </div>\n\n            <button className=\"connect-btn\">\n                Connect Wallet\n            </button>\n        </nav>\n    )\n}","import React, { useState } from \"react\";\nimport \"./Zap.css\";\nimport abi from \"./abi.json\";\nimport ABI from \"./ABII.json\";\n\nexport const Zap = (props) => {\n  const [activeTab, setActiveTab] = useState(\"deposit\");\n  const TronWeb = require(\"tronweb\");\n  const [lpLogged, setlpLogged] = useState(true);\n  const ACCOUNT = \"TEQH6py1Pi8YHNgi9cPMHCKLboBTUZrsYT\";\n  const CONTRACT = \"THFWEqvjwicGSLcnrZdHawU164TFLiJ2Pk\";\n  const [rewardso, setrewardso] = useState(0);\n  const [stakedreward, setstakedreward] = useState(0);\n  const [Frozen, setFrozen] = useState(0);\n\n  var CONTRAC = \"TCsoth9pcXS7tyCFjxf46xjUYGxCsd1kJx\";\n  var approve = \"TPgK4SEeuvwhKB7DcB5f3t2rdqB97SQMPc\";\n\n  function getTronweb() {\n    var obj = setInterval(async () => {\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n        clearInterval(obj);\n        document.write(\"Connected:\", window.tronWeb.defaultAddress.base58);\n      }\n    }, 10);\n  }\n\n  async function fetchData() {\n    let curWeb = window.tronWeb;\n    let curAddr = curWeb.defaultAddress.base58;\n    var address = curAddr;\n\n    const tnra = tronweb.contract(ABI.entrys, CONTRAC);\n    const rdcount = await tnra.methods.earned(address).call();\n    console.log(rdcount);\n    const dcount = await tnra.methods.deposits(address).call();\n    console.log(dcount);\n\n    let sm = curWeb.BigNumber(rdcount[\"_hex\"]);\n    setrewardso((_rewardso) => sm.toNumber() / Math.pow(10, 6));\n    console.log(\"Fetchdata:\", fetchData);\n\n    let stakedbalance = curWeb.BigNumber(dcount[\"_hex\"]);\n    setstakedreward(\n      (_stakedreward) => stakedbalance.toNumber() / Math.pow(10, 6)\n    );\n    console.log(\"stakedbalance:\", fetchData);\n  }\n\n  var tronweb = window.tronWeb;\n\n  async function stake() {\n    var spender = \"TCsoth9pcXS7tyCFjxf46xjUYGxCsd1kJx\";\n    var amount = document.querySelector(\"#amount\").value;\n    var decimals = 6;\n    amount = parseInt(amount);\n    decimals = parseInt(decimals);\n    amount = amount * Math.pow(10, decimals);\n    if (amount >= 10) var valu = amount;\n    var tra = tronweb.contract(abi.entrys, approve);\n    const tx = await tra.methods.approve(spender, valu).send();\n    console.log(tx);\n    const contractn = tronweb.contract(ABI.entrys, CONTRAC);\n    const resp = await contractn.methods.stake(amount).send();\n    console.log(resp);\n    await fetchData();\n  }\n\n  async function claim() {\n    const res = tronweb.contract(ABI.entrys, CONTRAC);\n    const resp = await res.methods.getReward().send();\n    console.log(resp);\n    await fetchData();\n  }\n\n  async function withdraw() {\n    const w = tronweb.contract(ABI.entrys, CONTRAC);\n    const respomy = await w.methods.exit().send();\n    await fetchData();\n  }\n\n  setTimeout(function () {\n    fetchData();\n  }, 300);\n\n  return (\n    <div className=\"zap\">\n      <div className=\"card\">\n        <div className=\"list-info\">\n          <span>Farm APY:</span>\n          <b>19%</b>\n        </div>\n        <div className=\"list-info\">\n          <span>Staked:</span>\n          <span>\n            {stakedreward}{\" \"}\n            <img\n              height=\"25\"\n              width=\"25\"\n              src=\"https://coin.top/production/logo/usdtlogo.png\"\n            />\n            TESTUSDT\n          </span>\n        </div>\n        <div className=\"list-info\">\n          <span>Claimable:</span>\n          <span>\n            {rewardso}{\" \"}\n            <img\n              height=\"25\"\n              width=\"25\"\n              src=\"https://coin.top/production/logo/usdtlogo.png\"\n            />\n            TESTUSDT\n          </span>\n        </div>\n        <form className=\"input-group button\">\n          <input type=\"text\" id=\"amount\" placeholder=\"Enter the amount\" />\n          <button type=\"button\" onClick={stake}>\n            Approve & Freeze\n          </button>\n          <input type=\"hidden\" value=\"8\" id=\"decimals01\" />\n        </form>\n        <span className=\"available-balance\">Available balance: {900}</span>\n        <button className=\"connect-btn\" onClick={claim}>\n          Claim rewards\n        </button>\n\n        <button className=\"connect-btn\" onClick={withdraw}>\n          Unstake all\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './Admin.css'\n\nexport const Admin = (props) => {\n\n    return (\n        <div className=\"admin\">\n            <div className=\"card\">\n                <div className=\"analytic\">\n                    <h5>Total Pool Balance (BUSD)</h5>\n                    <h1>12,000,222</h1>\n                </div>\n\n                <div className=\"analytic\">\n                    <h5>Total Pool Users</h5>\n                    <h1>12,000</h1>\n                </div>\n\n                <div className=\"analytic\">\n                    <h5>Remaining Tokens</h5>\n                    <h1>12,000</h1>\n                </div>\n            </div>\n        </div >\n    )\n}","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Navbar } from './components'\nimport { Zap, Admin } from \"./pages\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar />\n        <Switch >\n          <Route exact path=\"/\" component={Zap} />\n          <Route path=\"/admin\" component={Admin} />\n        </Switch >\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}